version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: nmos_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nmos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nmos_pass}
      POSTGRES_DB: ${POSTGRES_DB:-nmos_controller_db}
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nmos_user} -d ${POSTGRES_DB:-nmos_controller_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nmos-network

  redis:
    image: redis:6-alpine
    container_name: nmos_redis_cache
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nmos-network

  registry_service:
    build: ./backend/nmos_registry_service
    ports:
      - "8000:8000" # Query API port
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/nmos
      - REDIS_HOST=redis
      - NODE_ID_PREFIX=reg_node_
      - PYTHONUNBUFFERED=1 # For seeing logs immediately
    command: python main.py # Ensure this is the correct command
    volumes:
      - ./backend/nmos_registry_service:/app
      - ./backend/event_rules.ini:/app/event_rules.ini # Mount the rules file
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  connection_service:
    build: ./backend/connection_management_service
    ports:
      - "8001:8000"
    environment:
      - REGISTRY_URL=http://registry_service:8000
      - REDIS_HOST=redis
      - PYTHONUNBUFFERED=1
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend/connection_management_service:/app
    depends_on:
      registry_service: # No condition needed, just start after
        condition: service_started
      redis:
        condition: service_started

  event_service:
    build: ./backend/event_handling_service
    ports:
      - "8002:8000"
    environment:
      - REGISTRY_URL=http://registry_service:8000
      - CONNECTION_API_URL=http://connection_service:8000
      - EVENT_RULES_PATH=/app/event_rules.ini
      - PYTHONUNBUFFERED=1
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend/event_handling_service:/app
      - ./backend/event_rules.ini:/app/event_rules.ini
    depends_on:
      registry_service:
        condition: service_started
      connection_service:
        condition: service_started

  audio_mapping_service:
    build: ./backend/audio_mapping_service
    ports:
      - "8003:8000"
    environment:
      - REGISTRY_URL=http://registry_service:8000
      - CONNECTION_API_URL=http://connection_service:8000
      - PYTHONUNBUFFERED=1
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend/audio_mapping_service:/app
    depends_on:
      registry_service:
        condition: service_started
      connection_service:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_REGISTRY_SERVICE_URL=http://localhost:8000 # Exposed port for registry
      - REACT_APP_CONNECTION_SERVICE_URL=http://localhost:8001 # Exposed port for connection
      - REACT_APP_EVENT_SERVICE_URL=http://localhost:8002 # Exposed port for event
      - REACT_APP_AUDIO_MAPPING_SERVICE_URL=http://localhost:8003 # Exposed port for audio mapping
      # WebSocket URL should point to the publicly accessible endpoint of the registry service's WebSocket
      # If registry_service WS is on port 8000 (same as its HTTP API), then:
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws 
    volumes:
      - ./frontend/src:/app/src # For hot-reloading if dev server supports it
      - ./frontend/public:/app/public
    depends_on:
      registry_service:
        condition: service_started
      connection_service:
        condition: service_started
      event_service:
        condition: service_started
      audio_mapping_service:
        condition: service_started

volumes:
  postgres_data:
  redis_data:

networks:
  nmos-network:
    driver: bridge
