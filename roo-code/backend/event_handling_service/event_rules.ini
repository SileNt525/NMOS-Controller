# Example Event Rules for NMOS Event Handling Service
#
# Each section defines a rule. The section name is the rule's identifier.
#
# Conditions:
#   condition_type: The type of event field to check (e.g., 'state', 'type', 'topic_urn', or any key in the event payload).
#   condition_value: The value to match for the condition_type.
#   condition_match_mode: (Optional) 'exact' (default), 'contains', 'startswith', 'endswith', 'regex'.
#
# Actions:
#   action_type: The type of action to perform. Supported types: 'route_change', 'log_event'.
#   action_... : Parameters specific to the action_type.
#
# For 'route_change' action:
#   action_sender_id: UUID of the NMOS Sender.
#   action_receiver_id: UUID of the NMOS Receiver.
#   action_transport_params: (Optional) JSON string for transport parameters, e.g., "[{\"rtp_enabled\": true}]"
#                            Defaults to an empty list [{}] if not provided, meaning use receiver's default parameters.
#   action_activation_mode: (Optional) 'activate_immediate' (default), 'activate_scheduled_absolute', 'activate_scheduled_relative'.
#   action_activation_time: (Optional) ISO 8601 timestamp for absolute, or PThhMmSs format for relative, if mode is scheduled.
#   action_comment: (Optional) A comment for this action.
#
# For 'log_event' action:
#   action_message: The message to log.

[TallyOnSwitchToCam1]
condition_type = state      ; Assuming the event payload has a 'state' field for tally
condition_value = on
# condition_match_mode = exact ; This is the default
# You might also want to match a specific device or event type, e.g.:
# condition_device_id = specific_device_uuid_abc
# condition_event_type = tally_change_event_urn
action_type = route_change
action_sender_id = "01234567-89ab-cdef-0123-456789abcdef" ; Replace with actual Sender UUID
action_receiver_id = "fedcba98-7654-3210-fedc-ba9876543210" ; Replace with actual Receiver UUID
action_comment = "Primary tally ON: Switch to Camera 1 (Sender X to Receiver Y)"

[TallyOffLogEvent]
condition_type = state
condition_value = off
action_type = log_event
action_message = "Primary tally is now OFF."

[GPI_Trigger_Log]
condition_type = type      ; Assuming event payload has a 'type' field like 'gpi_trigger'
condition_value = gpi_input_1_active
action_type = log_event
action_message = "GPI Input 1 has been activated."

[SpecificEventSourceRouteChange]
# This rule matches a specific event type from a specific topic (source URN)
condition_type = topic_urn
condition_value = "urn:x-nmos:event:source_A:status_change"
# And a specific state within that event's data
# Assuming the event data is like: { "topic_urn": "...", "payload": { "current_status": "active" } }
# To match nested fields, the RulesEngine might need to support dot notation or you simplify event structure.
# For now, let's assume the relevant field is at the top level of the event payload passed to evaluate_event.
# If 'current_status' is inside 'payload', the condition_type would be 'payload.current_status' (if supported)
# or the event processing logic in main.py would need to flatten it.
# Based on current main.py, it processes single_event_data directly.
condition_current_status = active ; This implies the event payload has a 'current_status' key
action_type = route_change
action_sender_id = "another_sender_uuid"
action_receiver_id = "another_receiver_uuid"
action_comment = "Source A reported 'active' status, performing a route."